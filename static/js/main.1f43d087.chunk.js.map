{"version":3,"sources":["components/Title/Title.styles.js","components/Title/Title.jsx","components/List/List.styles.js","components/Input/Input.styles.js","components/Input/Input.jsx","components/Task/Task.styles.js","components/Task/Task.jsx","components/List/List.jsx","App.js","index.js"],"names":["StyledTitle","styled","h1","Title","props","ListWrapper","div","TasksList","MyButton","button","RemoveTasksButton","RemoveTasksBlock","InputBlock","StyledInput","input","AddButton","Input","addTodo","useState","value","setValue","addTodoInList","trim","length","type","onChange","e","target","onKeyDown","key","placeholder","onClick","TaskWrapper","TaskBlock","TaskChanger","DateBlock","Date","h3","RemoveButton","ChangeButton","Color","SaveButton","TaskText","Completed","ChangeText","textarea","Task","task","removeTodo","todoCompleted","ChangeTodoText","OnChangeTodo","text","date","change","id","defaultValue","wrap","rows","isCompleted","List","useEffect","localStorage","clear","setItem","JSON","stringify","tasks","localTodo","parse","getItem","loadingFromLocalStorage","setTasks","filter","map","newTask","getTime","toLocaleString","item","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f43d087.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledTitle = styled.h1`\n    font-famili: \"Roboto\", sans-serif;\n    font-weight: 700;\n    font-size: 3rem;\n    text-align: center;\n    margin-top 30px;\n    color: #A9A9A9;\n    text-shadow: 5px 5px 10px black;\n`;\n","import React from \"react\";\nimport { StyledTitle } from \"./Title.styles\";\n\nexport const Title = (props) => {\n    return <StyledTitle>Todo list</StyledTitle>;\n};\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.div``;\nexport const TasksList = styled.div``;\nexport const MyButton = styled.button`\n    padding: 5px 15px;\n    font-size: 20px;\n    background: transparent;\n    background-color: orange;\n    box-shadow: 0 0 10px 2px black;\n    border: none;\n    border-radius: 50px;\n`;\n\nexport const RemoveTasksButton = styled(MyButton)`\n    margin-bottom: 30px;\n`;\n\nexport const RemoveTasksBlock = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 30px;\n`;\n","import styled from \"styled-components\";\nimport { MyButton } from \"../List/List.styles\";\n\nexport const InputBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: space-around;\n`;\n\nexport const StyledInput = styled.input`\n    width: 100%;\n    padding: 10px 15px;\n    margin-top: 30px;\n    border-radius: 30px;\n    box-shadow: 0 0 10px 5px black;\n    outline:none;\n`;\n\nexport const AddButton = styled(MyButton)`\n    margin: 30px auto 0 auto;\n`;\n","import React, { useState } from \"react\";\nimport { StyledInput, InputBlock, AddButton } from \"./Input.styles\";\n\nexport const Input = ({ addTodo }) => {\n    const [value, setValue] = useState(\"\");\n\n    const addTodoInList = () => {\n        if (value.trim().length !== 0) {\n            addTodo(value.trim());\n            setValue(\"\");\n        }\n    };\n\n    const handleSubmit = (e) => {\n        if (e.key === \"Enter\") {\n            addTodoInList();\n        }\n    };\n\n    return (\n        <InputBlock>\n            <StyledInput\n                type=\"text\"\n                value={value}\n                onChange={(e) => setValue(e.target.value)}\n                onKeyDown={handleSubmit}\n                placeholder=\"Введи задачу\"\n            />\n            <AddButton onClick={addTodoInList}>Добавить</AddButton>\n        </InputBlock>\n    );\n};\n","import styled from \"styled-components\";\n\nexport const TaskWrapper = styled.div`\n    display: flex;\n    padding: 15px;\n    // margin: 5px 0;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const TaskBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: space-around;\n    margin: 30px 0 0 0;\n    box-shadow: 0 0 10px 5px black;\n    background-color: #a9a9a9;\n    border-radius: 30px;\n`;\n\nexport const TaskChanger = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 0 0 15px 0;\n`;\n\nexport const DateBlock = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nexport const Date = styled.h3`\n    color: orange;\n    margin: 15px 0 5px 15px;\n    width: auto;\n    text-shadow: 1px 1px 2px black;\n`;\n\nexport const RemoveButton = styled.button`\n    background-color: orange;\n    border: none;\n    padding: 5px 10px;\n    margin: 15px 15px 0 0;\n    box-shadow: 0 0 10px 3px black;\n    border-radius: 50px;\n`;\n\nexport const ChangeButton = styled(RemoveButton)`\n    ${(props) => props.Color};\n`;\n\nexport const SaveButton = styled(RemoveButton)`\n    margin: 15px 0 0 0;;\n`;\n\n\nexport const TaskText = styled.h3`\n    ${(props) => props.Completed};\n    word-break: break-word;\n    hyphens: auto;\n`;\n\nexport const ChangeText = styled.textarea`\n    margin: 15px 15px 0 15px;\n    padding: 5px;\n    background-color: #a9a9a9;\n    width: 95%;\n    color: black;\n    border: none;\n    resize: none;\n`;\n","import React, { useState } from \"react\";\nimport {\n    TaskWrapper,\n    TaskText,\n    TaskBlock,\n    TaskChanger,\n    DateBlock,\n    RemoveButton,\n    ChangeButton,\n    SaveButton,\n    Date,\n    ChangeText,\n} from \"./Task.styles\";\n\nexport const Task = ({\n    task,\n    removeTodo,\n    todoCompleted,\n    ChangeTodoText,\n    OnChangeTodo,\n}) => {\n    const [value, setValue] = useState(task.text);\n\n    const changeTodo = () => {\n        if (value.trim().length !== 0) {\n            ChangeTodoText(task.id, value.trim());\n            setValue(\"\");\n        }\n    };\n\n    return (\n        <TaskBlock>\n            <DateBlock>\n                <Date>{task.date}</Date>\n                <div>\n                    {task.change ? (\n                        <ChangeButton\n                            onClick={() => OnChangeTodo(task.id)}\n                            Color={\"background-color: red;\"}\n                        >\n                            ред.\n                        </ChangeButton>\n                    ) : (\n                        <ChangeButton onClick={() => OnChangeTodo(task.id)}>\n                            ред.\n                        </ChangeButton>\n                    )}\n\n                    <RemoveButton onClick={() => removeTodo(task.id)}>\n                        x\n                    </RemoveButton>\n                </div>\n            </DateBlock>\n\n            {task.change ? (\n                <TaskChanger>\n                    <ChangeText\n                        defaultValue={task.text}\n                        onChange={(e) => setValue(e.target.value)}\n                        type=\"text\"\n                        wrap=\"hard\"\n                        rows=\"5\"\n                    ></ChangeText>\n                    <SaveButton onClick={changeTodo}>Сохранить</SaveButton>\n                </TaskChanger>\n            ) : (\n                <TaskWrapper onClick={() => todoCompleted(task.id)}>\n                    {task.isCompleted ? (\n                        <TaskText Completed={\"text-decoration: line-through;\"}>\n                            {task.text}\n                        </TaskText>\n                    ) : (\n                        <TaskText>{task.text}</TaskText>\n                    )}\n                </TaskWrapper>\n            )}\n        </TaskBlock>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n    ListWrapper,\n    TasksList,\n    RemoveTasksButton,\n    RemoveTasksBlock,\n} from \"./List.styles\";\nimport { Input } from \"../Input/Input\";\nimport { Task } from \"../Task/Task\";\n\nexport const List = () => {\n    useEffect(() => {\n        localStorage.clear();\n        localStorage.setItem(\"TodoList\", JSON.stringify(tasks));\n    });\n\n    const loadingFromLocalStorage = () => {\n        const localTodo = JSON.parse(localStorage.getItem(\"TodoList\"));\n        if (localTodo === null) {\n            return [];\n        } else {\n            return localTodo;\n        }\n    };\n\n    const [tasks, setTasks] = useState(loadingFromLocalStorage());\n\n    const addTodo = (text) => {\n        const newTask = {\n            id: new Date().getTime(),\n            date: new Date().toLocaleString(),\n            text,\n            isCompleted: false,\n            change: false,\n        };\n\n        setTasks([...tasks, newTask]);\n    };\n\n    const removeTodo = (id) => {\n        setTasks(tasks.filter((task) => task.id !== id));\n    };\n\n    const todoCompleted = (id) => {\n        setTasks([\n            ...tasks.map((task) =>\n                task.id === id\n                    ? { ...task, isCompleted: !task.isCompleted }\n                    : { ...task }\n            ),\n        ]);\n    };\n\n    const OnChangeTodo = (id) => {\n        setTasks([\n            ...tasks.map((task) =>\n                task.id === id ? { ...task, change: !task.change } : { ...task }\n            ),\n        ]);\n    };\n\n    const ChangeTodoText = (id, text) => {\n        setTasks([\n            ...tasks.map((task) =>\n                task.id === id ? { ...task, text: text, change: !task.change} : { ...task }\n            ),\n        ]);\n    };\n\n    return (\n        <ListWrapper>\n            <Input addTodo={addTodo} />\n            <TasksList>\n                {tasks.map((item) => (\n                    <Task\n                        removeTodo={removeTodo}\n                        task={item}\n                        todoCompleted={todoCompleted}\n                        ChangeTodoText={ChangeTodoText}\n                        OnChangeTodo={OnChangeTodo}\n                        key={item.id}\n                    />\n                ))}\n            </TasksList>\n            <RemoveTasksBlock>\n                {tasks.length > 1 ? (\n                    <RemoveTasksButton onClick={() => setTasks([])}>\n                        Удалить всё\n                    </RemoveTasksButton>\n                ) : (\n                    <div></div>\n                )}\n            </RemoveTasksBlock>\n        </ListWrapper>\n    );\n};\n","import { Title } from \"./components/Title/Title\";\nimport { List } from \"./components/List/List\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <Title />\n            <List />\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}